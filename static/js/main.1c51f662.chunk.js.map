{"version":3,"sources":["fbase.js","components/AuthForm.js","components/SocialLogin.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","dbService","storageService","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","SocialLogin","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","operationType","icon","faGoogle","faGithub","Auth","faTwitter","color","size","style","marginBottom","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","autoFocus","src","alt","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorID","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","marginTop","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","currentUser","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c51f662.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\n// Your web app's Firebase configuration\n// MUST use REACT_APP_\"your environment variable\"\n// Using process.env is only for GitHub,\n// Anyways when you build the app and you put it on a website, CRA will replace REACT_APP with the real values\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import React, { useState } from \"react\";\nimport { authService } from \"fbase\";\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        // create account\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        // log in\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          type=\"submit\"\n          value={newAccount ? \"Create Account\" : \"Log In\"}\n          className=\"authInput authSubmit\"\n        />\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import React from \"react\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGoogle, faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nconst SocialLogin = () => {\n  const onSocialClick = async (event) => {\n    const {\n      target: { name },\n    } = event;\n\n    let provider;\n\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = await authService.signInWithPopup(provider);\n    console.log(data.operationType);\n  };\n\n  return (\n    <div className=\"authBtns\">\n      <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n        Continue with Google <FontAwesomeIcon icon={faGoogle} />\n      </button>\n      <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n        Continue with Github <FontAwesomeIcon icon={faGithub} />\n      </button>\n    </div>\n  );\n};\n\nexport default SocialLogin;\n","import React from \"react\";\nimport AuthForm from \"components/AuthForm\";\nimport SocialLogin from \"components/SocialLogin\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Auth = () => {\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={\"#04AAFF\"}\n        size=\"3x\"\n        style={{ marginBottom: 30 }}\n      />\n      <AuthForm />\n      <SocialLogin />\n    </div>\n  );\n};\n\nexport default Auth;\n","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Nweet = ({ nweetObj, isOwner }) => {\n  const [editing, setEditing] = useState(false); // checking if it is editing mode or not\n  const [newNweet, setNewNweet] = useState(nweetObj.text); // updating the text of the <input/>\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\n    if (ok) {\n      // delete\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\n      if (nweetObj.attachmentUrl !== \"\") {\n        await storageService.refFromURL(nweetObj.attachmentUrl).delete();\n      }\n    }\n  };\n\n  const toggleEditing = () => setEditing((prev) => !prev);\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewNweet(value);\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    // console.log(nweetObj, newNweet);\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\n      text: newNweet,\n    });\n    toggleEditing(); // finish editing mode\n  };\n\n  return (\n    <div className=\"nweet\">\n      {editing ? (\n        <>\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\n            <input\n              onChange={onChange}\n              type=\"text\"\n              placeholder=\"Edit your nweet\"\n              value={newNweet}\n              required\n              autoFocus\n              className=\"formInput\"\n            />\n            <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\n          </form>\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n            Cancel\n          </span>\n        </>\n      ) : (\n        <>\n          <h4>{nweetObj.text}</h4>\n          {nweetObj.attachmentUrl && (\n            <img src={nweetObj.attachmentUrl} alt=\"img\" />\n          )}\n          {isOwner && (\n            <div className=\"nweet__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Nweet;\n","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbase\";\nimport { v4 as uuidv4 } from \"uuid\"; // make random unique id\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst NweetFactory = ({ userObj }) => {\n  const [nweet, setNweet] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n\n  const onSubmit = async (event) => {\n    if (nweet === \"\") {\n      return;\n    }\n    event.preventDefault();\n    let attachmentUrl = \"\";\n\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`); // First we create a reference to the file\n      const response = await attachmentRef.putString(attachment, \"data_url\"); // and then we update data to that reference\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n\n    const nweetObj = {\n      text: nweet,\n      createdAt: Date.now(),\n      creatorID: userObj.uid,\n      attachmentUrl,\n    };\n\n    await dbService.collection(\"nweets\").add(nweetObj);\n    setNweet(\"\");\n    setAttachment(\"\");\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNweet(value);\n  };\n\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    // console.log(files[0]); // Check it!\n    const theFile = files[0]; // out input only access a one file, that's why we select first file [0]\n    const reader = new FileReader(); // create a reader => check it on MDN\n    reader.onloadend = (finishedEvent) => {\n      // when it have finished reading \"theFile\", we can get \"finishedEvent\" => eventListener\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    if (theFile) {\n      // if theFile is not undefined\n      reader.readAsDataURL(theFile); // start to read \"theFile\" asynchronously\n    }\n    setAttachment(\"\");\n  };\n\n  const onClearAttachment = () => {\n    setAttachment(\"\");\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n      <div className=\"factoryInput__container\">\n        <input\n          className=\"factoryInput__input\"\n          value={nweet}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"What's on your mine?\"\n          maxLength={120}\n          required\n        />\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n      </div>\n      <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n        <span>Add photos</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n\n      <input\n        id=\"attach-file\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n        style={{\n          opacity: 0,\n        }}\n      />\n\n      {attachment && ( // when attachment is true, ...\n        <div className=\"factoryForm__attachment\">\n          <img\n            src={attachment}\n            alt=\"attachment\"\n            style={{\n              backgroundImage: attachment,\n            }}\n          />\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n            <span>Remove</span>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default NweetFactory;\n","import React, { useEffect, useState } from \"react\";\nimport { dbService } from \"fbase\";\nimport Nweet from \"components/Nweet\";\nimport NweetFactory from \"components/NweetFactory\";\n\nconst Home = ({ userObj }) => {\n  const [nweets, setNweets] = useState([]);\n\n  // // Old way\n  // const getNweets = async () => {\n  //   const dbNweets = await dbService.collection(\"nweets\").get(); // This give me a querySnapShot which contains a lot of things => check oficial doc\n  //   dbNweets.forEach((document) => {\n  //     const nweetsObject = {\n  //       ...document.data(),\n  //       id: document.id,\n  //     };\n  //     setNweets((prev) => [nweetsObject, ...prev]); // Here I use implicit return and a function inside of setNweets where React provides previous value.\n  //   });\n  // };\n\n  useEffect(() => {\n    // getNweets();\n    // New way => It doesn't re-render! => more fast! => REAL TIME!!! <It is so usefull when you make a chat app>\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\n      const nweetArray = snapshot.docs.map((doc) => ({\n        id: doc.id, // It's useful to identify => Help to delete or update nweet\n        ...doc.data(),\n      }));\n      setNweets(nweetArray);\n    });\n  }, []);\n\n  useEffect(() => {\n    // There is an error note => Warning: Can't perform a React state update on an unmounted component. That's why we have to use cleanupFunction :)\n    // Ref => https://velog.io/@ohgoodkim/-%EC%97%90%EB%9F%AC%EB%85%B8%ED%8A%B8-Cant-perform-a-React-state-update-on-an-unmounted-component\n    return () => setNweets([]);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <NweetFactory userObj={userObj} />\n      <div style={{ marginTop: 30 }}>\n        {nweets.map((nweet) => (\n          <Nweet\n            key={nweet.id}\n            nweetObj={nweet}\n            isOwner={nweet.creatorID === userObj.uid}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { authService } from \"fbase\";\n\nconst Profile = ({ userObj, refreshUser }) => {\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n  };\n\n  // useEffect(() => {\n  //   const helpFunction = async () => {\n  //     // reference => https://www.robinwieruch.de/react-hooks-fetch-data\n  //     const nweets = await dbService\n  //       .collection(\"nweets\")\n  //       .where(\"creatorID\", \"==\", userObj.uid)\n  //       .orderBy(\"createdAt\", \"desc\") // noSQL => FirebaseError: The query requires an index. => firebase shows us an error how to fix it\n  //       .get();\n  //     console.log(nweets.docs.map((doc) => doc.data()));\n  //   };\n  //   helpFunction();\n  // });\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewDisplayName(value);\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n      });\n      refreshUser();\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"Display name\"\n          value={newDisplayName}\n          autoFocus\n          className=\"formInput\"\n        />\n        <input\n          type=\"submit\"\n          value=\"Update Profile\"\n          className=\"formBtn\"\n          style={{\n            marginTop: 10,\n          }}\n        />\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n        Log Out\n      </span>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({ userObj }) => {\n  return (\n    <nav>\n      <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n        <li>\n          <Link to=\"/\" style={{ marginRight: 10 }}>\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n          </Link>\n        </li>\n        <li>\n          <Link\n            to=\"/profile\"\n            style={{\n              marginLeft: 10,\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              fontSize: 12,\n            }}\n          >\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n            <span style={{ marginTop: 10 }}>\n              {userObj.displayName\n                ? `${userObj.displayName}의 Profile`\n                : \"Profile\"}\n            </span>\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} isLoggedIn={isLoggedIn} />}\n      {/* This && means isLoggedIn has to be true for <Navigation/> to happen */}\n      <Switch>\n        {isLoggedIn ? (\n          <>\n            {/* Here was an issue and I resolved it => Ref =>  https://stackoverflow.com/questions/51971449/react-warning-computedmatch-regarding-some-case-issues */}\n            <div\n              style={{\n                maxWidth: 890,\n                width: \"100%\",\n                margin: \"0 auto\",\n                marginTop: 80,\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Route exact path=\"/\">\n                <Home userObj={userObj} />\n              </Route>\n              <Route exact path=\"/profile\">\n                <Profile userObj={userObj} refreshUser={refreshUser} />\n              </Route>\n            </div>\n          </>\n        ) : (\n          <Route exact path=\"/\">\n            <Auth />\n          </Route>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState({});\n\n  useEffect(() => {\n    // Response from Firebase is late, so in this hook We can check if it is logged in or not\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setIsLoggedIn(true);\n        // To make responsed object small, we can choose only that we need to use\n        // setUserObj(user); // => Bring us whole object of user data\n\n        // Option 1:\n        setUserObj({\n          // Here we can select data which we need\n          displayName: user.displayName,\n          uid: user.uid,\n          // Here we have to define a function which we have used in Profile.js to update our newDisplayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n\n        // // Option 2:\n        // setUserObj(user); // => We take all user object and (see refreshUser function)\n      } else {\n        setIsLoggedIn(false);\n        setUserObj({});\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = async () => {\n    // This function is useful when displayName is changed in Profile.js\n\n    // console.log(authService.currentUser);\n    // There is a problem that React can not catch the change of profile's display name because authService.currentUser returns a masive object (It's hard to know)\n    // There are two ways to resolve this problem:\n    // Option 1. Make this object small => choose what we want to use\n    const user = await authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n\n    // // Option 2. Let React notice a change\n    // setUserObj(Object.assign({}, user)); // but when I use this option, there is an error => TypeError: userObj.updateProfile is not a function\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          isLoggedIn={isLoggedIn}\n          userObj={userObj}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n      <footer> &copy; Nwitter {new Date().getFullYear()}</footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}